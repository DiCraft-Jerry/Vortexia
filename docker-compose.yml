version: '3.8'

services:
  # PostgreSQL数据库 - 轻量化配置
  postgres:
    image: postgres:15-alpine  # 使用alpine版本更轻量
    container_name: simple-ci-postgres
    environment:
      POSTGRES_DB: simple_ci
      POSTGRES_USER: ci_user
      POSTGRES_PASSWORD: ci_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres-small.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis缓存 - 最小配置
  redis:
    image: redis:7-alpine
    container_name: simple-ci-redis
    command: redis-server --maxmemory 100mb --maxmemory-policy allkeys-lru --save ""
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Go后端应用
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.small
    container_name: simple-ci-backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=simple_ci
      - DB_USER=ci_user
      - DB_PASSWORD=ci_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GIN_MODE=release
      - GOGC=20  # 更激进的GC
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker构建支持
      - build_cache:/app/cache
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.4'
        reservations:
          memory: 128M
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: simple-ci-nginx
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./configs/nginx-small.conf:/etc/nginx/nginx.conf
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.2'
        reservations:
          memory: 32M
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  build_cache:
    driver: local

networks:
  default:
    driver: bridge 